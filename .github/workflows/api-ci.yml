
# Ciclo de integración continuo.
name: API CI
# Cada que se haga un commit corra este ciclo, es solo para proyectos simples, no monorepos como este.
# on: [push]

# Como este proyecto es un monorepo usaremos lo siguiente ...
on:
  push:
    paths:
    # Que haga push solo cuando hay cambios en api o en este mismo archivo.
      - "./api/**"
      - ".github/workflows/api-ci.yml"


defaults:
  run:
  # Trabaje en un directorio básico.
    working-directory: ./api

# ... Para un proyecro sencillo se usa solo on: [push] .

# Jobs son las formas y parámetros de automatizar pruebas de github.
# Con esto se le dice a github que no use nuestra maquina de Jest si no su maquina remota.

jobs:
  linter:
  #unit-test:
    runs-on: ubuntu-latest
    steps:
        # Clonar repo en la rama que esté.
      - name: Checkout
        uses: actions/checkout@v2
        # Configure node.
      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: 'npm'
            # No olvidar esa linea esencial para monorepos.
          cache-dependency-path: ./api/package-lock.json
        # Instalar dependencias.
      - name: install
        shell: bash
          # Comando para instalar dependencias en un entorno de integración continua.
        run: npm ci

        # Correr pruebas estáticas.
      - name: run linter
        shell: bash
        # No (lint:fix) reparar en actions, solo alertar.
        run: npm run lint

# Creé la rama hub para probar el tester de github.

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: 'npm'
          cache-dependency-path: ./api/package-lock.json
      - name: install
        shell: bash
        run: npm ci
        # Correr las pruebas unitarias en automático.
      - name: run unit test
        shell: bash
        run: npm run test

  e2e:
    runs-on: ubuntu-latest
    # ahora necesitamos contenedores para node y para BD.
    container:
      image: node:14

    services:
      mongo-e2e:
        image: mongo:4.4
        ports:
          - 27017:27017
        # env = environment .
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test123

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: install
        shell: bash
        run: npm ci

      # Correr pruebas E2E.
      - name: run e2e
        shell: bash
        run: npm run test:e2e
        env:
          MONGO_DB_NAME: demo
      # MONGO_URL antes apuntaba al @localhost, en actions debe apuntar al servicio creado @mongo-e2e.
      # No está de más revisar las clves de acceso en la url.
          MONGO_URL: mongodb://test:test123@mongo-e2e:27017?retryWrites=true&writeConcern=majority
# Fuente:  https://github.com/platzi/curso-testing-js/blob/step-18/.github/workflows/api-ci.yml
